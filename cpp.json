{
	"": {
		"prefix": "sysin",
		"body": [
		  "#ifndef LOCAL",
		  "    #pragma GCC optimize(\"O3,unroll-loops\")",
		  "    #pragma GCC target(\"avx2,lzcnt,popcnt\")",
		  "#endif",
		  "#include <bits/stdc++.h>",
		  "#define endl '\\n'",
		  "using namespace std;",
		  "// #include <ext/pb_ds/assoc_container.hpp>",
		  "// #include <ext/pb_ds/tree_policy.hpp>",
		  "// using namespace __gnu_pbds;",
		  "// template<typename T>",
		  "// using pbds = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;",
		  "typedef string str;",
		  "typedef long long ll;",
		  "typedef pair<ll, ll> pl;",
		  "typedef pair<int, int> pi;",
		  "typedef vector<ll> vl;",
		  "typedef vector<int> vi;",
		  "typedef vector<bool> vb;",
		  "typedef vector<str> vs;",
		  "typedef vector<pl> vpl;",
		  "typedef vector<pi> vpi;",
		  "typedef vector<vi> vvi;",
		  "typedef vector<vl> vvl;",
		  "typedef map<char, int> mci;",
		  "typedef map<int, int> mii;",
		  "typedef map<ll, ll> mll;",
		  "typedef set<int> si;",
		  "typedef set<ll> sl;",
		  "typedef multiset<int> msi;",
		  "typedef multiset<ll> msl;",
		  "#define F first",
		  "#define S second",
		  "#define all(a) a.begin(), a.end()",
		  "#define fr(i, a, b) for(int i = a; i < b; i++)",
		  "#define frr(i, b, a) for(int i = b; i > a; i--)",
		  "#define loop(i, n) for(int i = 0; i < n; i++)",
		  "#define eb emplace_back",
		  "#define pb pop_back",
		  "#define mset0(x) memset(x, 0, sizeof(x))",
		  "#define mset1(x) memset(x, -1, sizeof(x))",
		  "#define len(x) int(x.size())",
		  "#define sum(x) accumulate(x.begin(), x.end(), 0)",
		  "#define sumll(x) accumulate(x.begin(), x.end(), 0LL)",
		  "#define out(x) cout << x << endl",
		  "#define outl(x) cout << x << \" \"",
		  "#define out2(x, y) cout << x << \" \" << y << endl",
		  "#define printpair(x) cout << x.F << \" \" << x.S << endl",
		  "#define out3(x, y, z) cout << x << \" \" << y << \" \" << z << endl",
		  "#define out4(x, y, z, w) cout << x << \" \" << y << \" \" << z << \" \" << w << endl",
		  "#define lisin(x, n) loop(xx, n){cin >> x[xx];}",
		  "#define amax(a, b) a = max(a, b)",
		  "#define amin(a, b) a = min(a, b)",
		  "#define ump unordered_map",
		  "int mod = 1e9 + 7;",
		  "void yes(bool a = 1){",
		  "    if (a == 1) out(\"YES\");",
		  "    else out(\"NO\");}",
		  "",
		  "template<typename T1, typename T2> void printmap(map<T1, T2>& m){",
		  "    cout << \"{\";",
		  "    for(auto& i : m){cout << i.F << \" : \" << i.S << \", \";}",
		  "    cout << \"}\\n\";}",
		  "",
		  "template<typename T1, typename T2> void printmaplist(map<T1, T2>& mv){",
		  "    cout << \"{\";",
		  "    for (auto& i : mv){",
		  "        cout << i.F << \" : \" << \"[\";",
		  "        for (auto& j : i.S){cout << j << \", \";}",
		  "        cout << \"], \";}",
		  "    cout << \"}\\n\";}",
		  "",
		  "template<typename T> void printlist(vector<T>& v){",
		  "    for (T& i : v){cout << i << \" \";}",
		  "    cout << endl;}",
		  "",
		  "template<typename T> void print_vov(vector<vector<T>>& v){",
		  "    for(auto& i : v) printlist(i);}",
		  "",
		  "template<typename T1, typename T2> void print_vpi(vector<pair<T1, T2>>& v){",
		  "    for(auto& i : v) printpair(i);",
		  "}",
		  "",
		  "int n;",
		  "",
		  "void solve(){",
		  "    ",
		  "    return;",
		  "}",
		  "",
		  "int main(){$1",
		  "    ios_base::sync_with_stdio(false);",
		  "    cin.tie(NULL);",
		  "    int t = 1;",
		  "    cin >> t;",
		  "    while(t > 0){",
		  "        solve();",
		  "        t--;",
		  "    }",
		  "",
		  "    return 0;",
		  "}"
		],
		"description": ""
	  },
	"Check for palindrome": {
	"prefix": "isPalin",
	"body": [
		"bool isPal(str& s, int i, int j){",
		"    int l = j - i + 1;",
		"    for (int x = i; x < i + l/2; x++){",
		"        if (s[i] != s[l - i - 1]){",
		"            return 0;",
		"        }",
		"    }",
		"    return 1;",
		"}"
	],
	"description": ""
	},
	"Avoid Hacking in unordered data structures": {
		"prefix": "customhash",
		"body": [
		  "struct custom_hash {    // for unordered_map and unordered_set",
		  "    static uint64_t splitmix64(uint64_t x) {",
		  "        x += 0x9e3779b97f4a7c15;",
		  "        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
		  "        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
		  "        return x ^ (x >> 31);",
		  "    }",
		  "",
		  "    size_t operator()(uint64_t x) const {",
		  "        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();",
		  "        return splitmix64(x + FIXED_RANDOM);",
		  "    }",
		  "};",
		  "// unordered_map<long long, int, custom_hash> safe_map;"
		],
		"description": "Avoid Hacking in unordered data structures"
	  },
	  "Set with custom comparision function": {
		"prefix": "customset",
		"body": [
		  "struct cmp {",
		  "    template <typename T>",
		  "    bool operator()(const T& a, const T& b) const{$1",
		  "        return ",
		  "    }",
		  "};"
		],
		"description": "Set with custom comparision function"
	  },
	  "XOR of first n natural numbers": {
		"prefix": "xorn",
		"body": [
		  "template<typename T> T xorN(T& n){",
		  "    auto rem = n%4;",
		  "    if (rem == 0) return n;",
		  "    else if(rem == 1) return T(1);",
		  "    else if(rem == 2) return n + 1;",
		  "    return T(0);",
		  "}"
		],
		"description": "XOR of first n natural numbers"
	  },
	  "Ceil of a and b": {
		"prefix": "ceilf",
		"body": [
		  "template<typename T> T ceil1(T a, T b){",
		  "    if (a <= 0) return 0;",
		  "    if (a%b) return a/b + 1;",
		  "    return a/b;",
		  "}"
		],
		"description": "Ceil of a and b"
	  },
	  "Ceil of a and 2": {
		"prefix": "ceilbin",
		"body": [
		  "template<typename T> T ceil2(T& a){",
		  "    if (a <= 0) return 0;",
		  "    if (a&1) return a/2 + 1;",
		  "    return a/2;",
		  "}"
		],
		"description": "Ceil of a and 2"
	  },
	  "Get log2": {
		"prefix": "logfind",
		"body": [
		  "// commented part for ceil",
		  "template<typename T> int findlog2(T c){",
		  "    int ans = 0;",
		  "    // bool power = c && (!(c & (c - 1)));",
		  "    while (c > 1){",
		  "        c /= 2;",
		  "        ans++;",
		  "    }",
		  "    // if (power == 0){",
		  "    //     ans++;",
		  "    // }",
		  "    return ans;",
		  "}"
		],
		"description": "Get log2"
	  },
	  "Check if a number is power of 2": {
		"prefix": "isPowerof2",
		"body": [
		  "bool power = $1 && (!($1 & ($1 - 1)));"
		],
		"description": "Check if a number is power of 2"
	  },
	  "Binary Search starting": {
		"prefix": "binsearch",
		"body": [
		  "int ans = 0;",
		  "while (start <= end){",
		  "    mid = (start + end)/2;$1",
		  "}"
		],
		"description": "Binary Search starting"
	  },
	  "Google Case": {
		"prefix": "google",
		"body": [
		  "cout << \"Case #\" << t + 1 << \": \";"
		],
		"description": "Google Case"
	  },
	  "nth root of a number with precision": {
		"prefix": "rootwithdecimal",
		"body": [
		  "template<typename T> double npRoot(T number, T p, int precision){",
		  "    // For computing integral part",
		  "    T start = 0;",
		  "    T end = number;",
		  "    double ans = 0;",
		  "    T k, mid;",
		  "    while (start <= end){",
		  "        mid = (start + end)/2;",
		  "        k = pow(mid, p);",
		  "        if(k == number){",
		  "            ans = mid;",
		  "            break;",
		  "        }",
		  "        if(k < number){",
		  "            start = mid + 1;",
		  "            ans = mid;",
		  "        }",
		  "        else end = mid - 1;",
		  "    }",
		  "    // For computing the fractional part",
		  "    double increment = 0.1;",
		  "    loop(i, precision){",
		  "        while(pow(ans, p) <= number) {",
		  "            ans += increment;",
		  "        }",
		  "        ans -= increment;",
		  "        increment /= 10;",
		  "    }",
		  "    return ans;",
		  "}"
		],
		"description": "nth root of a number with precision"
	  },
	  "Integer part of nth root of a number": {
		"prefix": "root",
		"body": [
		  "template<typename T> T nRoot(T number, T p){",
		  "    T start = 0;",
		  "    T end = number;",
		  "    T ans = 0;",
		  "    T k, mid;",
		  "    while (start <= end){",
		  "        mid = (start + end)/2;",
		  "        k = pow(mid, p);",
		  "        if(k == number){",
		  "            ans = mid;",
		  "            break;",
		  "        }",
		  "        if(k < number){",
		  "            start = mid + 1;",
		  "            ans = mid;",
		  "        }",
		  "        else end = mid - 1;",
		  "    }",
		  "    return ans;",
		  "}"
		],
		"description": "Integer part of nth root of a number"
	  },
	  "Check if a number is prime": {
		"prefix": "isprime",
		"body": [
		  "template<typename T> bool checkPrime(T n){",
		  "    if (n <= 3) return n > 1;",
		  "    if ((n&1) == 0 || n%3 == 0) return false;",
		  "    for(int i = 5; i <= int(sqrt(n)); 6){",
		  "        if (n%i == 0 || n%(i + 2) == 0) return false;",
		  "    }",
		  "    return true;",
		  "}"
		],
		"description": "Check if a number is prime"
	  },
	  "Sieve of Eratosthenes": {
		"prefix": "seive",
		"body": [
		  "vector<bool> prime;",
		  "vi seive(int MAXN){",
		  "    loop(i, MAXN + 1){",
		  "        if (i&1) prime.eb(1);",
		  "        else prime.eb(0);",
		  "    }",
		  "    prime[1] = 0;",
		  "    prime[2] = 1;",
		  "    for(int i = 3; i <= int(sqrt(MAXN)); i+=2){",
		  "        if (prime[i]){",
		  "            for(int j = i*i; j <= MAXN; j+=i){",
		  "                prime[j] = 0;",
		  "            }",
		  "        }",
		  "    }",
		  "    // remove from here if list of prime not required",
		  "    vi v = {2};",
		  "    for(int i = 3; i <= MAXN; i+=2){",
		  "        if (prime[i]){",
		  "            v.eb(i);",
		  "        }",
		  "    }",
		  "    return v;",
		  "}"
		],
		"description": "Sieve of Eratosthenes"
	  },
	  "Factors of a number": {
		"prefix": "factors",
		"body": [
		  "template<typename T> vector<T> findDivisors(T n){",
		  "    vector<T> divisors;",
		  "    vector<T> store;",
		  "    for(int i = 1; i <= int(sqrt(n)); i++){",
		  "        if (n%i == 0){",
		  "            divisors.eb(i);",
		  "            if(n/i != i){",
		  "                store.eb(n/i);",
		  "            }",
		  "        }",
		  "    }",
		  "    reverse(all(store));",
		  "    divisors.insert(divisors.end(), all(store));",
		  "    return divisors;",
		  "}"
		],
		"description": "Factors of a number"
	  },
	  "Binary Exponentiation": {
		"prefix": "power",
		"body": [
		  "ll pw(ll a, ll b){  // remove mod if not needed",
		  "    a %= mod;",
		  "    ll ans = 1;",
		  "    while(b > 0){",
		  "        if (b&1){",
		  "            ans *= a;",
		  "            ans %= mod;",
		  "        }",
		  "        a *= a;",
		  "        a %= mod;",
		  "        b >>= 1;",
		  "    }",
		  "    return ans;",
		  "}"
		],
		"description": "Binary Exponentiation"
	  },
	  "Vector m*n": {
		"prefix": "2dvector",
		"body": [
		  "vector<vector<$1>> $2 ($3, vector<$1>($4));",
		  "// vector<vector<datatype_cell>> name (rows, vector<datatype_cell>(columns));"
		],
		"description": "Vector m*n"
	  },
	  "Questions involving maze": {
		"prefix": "maze",
		"body": [
		  "vector<int> dr = {0, 1, 0, -1};",
		  "vector<int> dc = {1, 0, -1, 0};",
		  "bool isPossible(pi u){  // n rows, m columns",
		  "    return (u.F >= 0 && u.F < n && u.S >= 0 && u.S < m);",
		  "}",
		  "// loop(i, 4) u = {v.F + dr[i], v.S + dc[i]};",
		  "// maintain parent and distance in 2d vectors",
		  "// while(x != s){",
		  "//     par = parent[x.F][x.S];",
		  "//     if (par.F == x.F - 1) path.emplace_front('D');",
		  "//     else if (par.F == x.F + 1) path.emplace_front('U');",
		  "//     else if (par.S == x.S + 1) path.emplace_front('L');",
		  "//     else path.emplace_front('R');",
		  "//     x = parent[x.F][x.S];",
		  "// }"
		],
		"description": "Questions involving maze"
	  },
	  "for grids": {
		"prefix": "toCell",
		"body": [
		  "int cell(pi x){  // m columns",
		  "    return x.F*m + x.S;",
		  "}"
		],
		"description": "for grids"
	  },
	  "prefix sum": {
		"prefix": "pref_sum",
		"body": [
		  "vl $1 = {0};   // use a as ll",
		  "partial_sum(all($2), back_inserter($1));"
		],
		"description": "prefix sum"
	  }
}